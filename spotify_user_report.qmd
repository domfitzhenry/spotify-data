---
title: 'Spotify Music Data'
format:
  html: 
    embed-resources: true
    default-image-extension: ''
    theme: cyborg
    page-layout: full
    fontsize: 16px
editor: visual
echo: false
---

```{r}
#| label: setup
#| include: false


library(tidyverse)
library(reactable)
library(htmltools)
library(ggrepel)
library(ggridges)
library(plotly)

load('data/user_data.RData')

# Unpack the list for convenience
list2env(play_summary, .GlobalEnv)


# Colours ----
bg_col <- '#060606'
faint_col <- '#161b22'

txt_col <- '#e6edf3'
txt_light_col <- '#adafae'

spotify_green <- '#1DB954'


# Function that pretty prints the duration like lubridate
pretty_seconds <- function(secs, unit_name = 'undefined') {
  
  SECONDS_IN_ONE <- c(
    second = 1,
    minute = 60,
    hour   = 3600,
    day    = 86400
  )
  
  if(unit_name %in% names(SECONDS_IN_ONE)) {
    unit_index <- which(SECONDS_IN_ONE[unit_name] == SECONDS_IN_ONE)
  } else {
    unit_index <- max(which(secs >= SECONDS_IN_ONE))
  }
    
  result <- paste0(
    format(floor(secs / SECONDS_IN_ONE[unit_index]), big.mark = ','), " ", 
    names(SECONDS_IN_ONE)[unit_index], 's'
    )
  
  return(result)
}


# Reactable Utilities ----

# Function for displaying the trend indicators on top tracks, artists etc.
trend_indicator <- function(value = 0) {
  args <- list(role = 'img', title = value)
  
  if (is.na(value)) {
    args <- c(args, list(shiny::icon("circle"), 
                         style = "color: #2e77d0; font-size: 0.6rem"))
  } else if (value == 0) {
    args <- c(args, list("â€“", style = "color: #666; font-weight: 700"))
  } else if (value > 0) {
    args <- c(args, list(shiny::icon("caret-up"), style = "color: #1ed760"))
  } else if (value < 0) {
    args <- c(args, list(shiny::icon("caret-down"), style = "color: #cd1a2b"))
  }
  
  do.call(span, args)
}


# Function that takes a measure as a parameter, and returns a reactable table
# formatted with the lowest n values on the left and the highest n values on
# the right
build_measure_table <- function(measure, n_val = 5L){
  
  m0 <- top_track_features %>%
    slice_min(order_by = .data[[measure]], with_ties = FALSE, n = n_val) %>%
    select(all_of(measure), artist_track, track_url) %>%
    rename(
      low = artist_track,
      low_url = track_url,
      low_measure = all_of(measure)
      )
  
  m1 <- top_track_features %>%
    slice_max(order_by = .data[[measure]], with_ties = FALSE, n = n_val) %>%
    select(artist_track, all_of(measure), track_url) %>%
    rename(
      high = artist_track,
      high_url = track_url,
      high_measure = all_of(measure)
    )
  
  m <- bind_cols(m0, m1)
  
  m %>%
    reactable(
      wrap = FALSE,
      sortable = FALSE,
      paginationType = 'simple',
      minRows = 5,
      columns = list(
        low_measure = colDef(
          name = '',
          align = 'left',
          width = 70,
          class = 'number'
        ),
        low = colDef(
          name = paste('Low', measure),
          resizable = TRUE,
          cell = function(value, index) {
            tags$a(
              href = m[index, 'low_url'],
              target = "_blank", value
            )
          },
          minWidth = 200
        ),
        low_url = colDef(show = FALSE),
        
        high = colDef(
          name = paste('High', measure),
          align = 'right',
          resizable = TRUE,
          cell = function(value, index) {
            tags$a(
              href = m[index, 'high_url'],
              target = "_blank", value
            )
          },
          minWidth = 200
        ),
        high_measure = colDef(
          name = '',
          width = 70,
          format = colFormat(separators = TRUE),
          class = 'number'
        ),
        high_url = colDef(show = FALSE)
        
      )
    ) %>%
    return()

}



# Default reactable theme

options(
  reactable.theme = reactableTheme(
    color = txt_col,
    backgroundColor = bg_col,
    borderColor = faint_col,
    
    borderWidth = '1px',
    highlightColor = 'rgba(255, 255, 255, 0.1)',
    cellPadding = '10px 8px',
    style = list(
      fontFamily = 'Work Sans, Helvetica Neue, Helvetica, Arial, sans-serif',
      fontSize = '0.875rem',
      'a' = list(
        color = txt_col,
        textDecoration = 'none',
        '&:hover, &:focus' = list(
          textDecoration = 'underline',
          textDecorationThickness = '1px'
        )
      ),
      '.number' = list(
        color = txt_col,
        fontFamily = 'Source Code Pro, Consolas, Monaco, monospace'
      ),
      '.tag' = list(
        padding = '0.125rem 0.25rem',
        color = 'hsl(0, 0%, 40%)',
        fontSize = '0.75rem',
        border = '1px solid hsl(0, 0%, 24%)',
        borderRadius = '2px',
        textTransform = 'uppercase'
      )
    ),
    headerStyle = list(
      color = txt_col,
      fontWeight = 400,
      fontSize = '0.75rem',
      letterSpacing = '1px',
      textTransform = 'uppercase',
      '&:hover, &:focus' = list(color = txt_col)
    ),
    rowHighlightStyle = list(
      '.tag' = list(color = txt_col, borderColor = txt_light_col)
    ),
    # Full-width search bar with search icon
    searchInputStyle = list(
      paddingLeft = '1.9rem',
      paddingTop = '0.5rem',
      paddingBottom = '0.5rem',
      width = '100%',
      border = 'none',
      backgroundColor = bg_col,
      backgroundSize = '1rem',
      backgroundPosition = 'left 0.5rem center',
      backgroundRepeat = 'no-repeat',
      '&:focus' = list(backgroundColor = 'rgba(255, 255, 255, 0.1)', 
                       border = 'none'),
      '::placeholder' = list(color = txt_light_col),
      '&:hover::placeholder, &:focus::placeholder' = list(color = txt_col)
    ),
    paginationStyle = list(color = txt_light_col),
    pageButtonHoverStyle = list(backgroundColor = 'hsl(0, 0%, 20%)'),
    pageButtonActiveStyle = list(backgroundColor = 'hsl(0, 0%, 24%)')
  )
)
  
```

::: text-center
`r if(!is.na(current_user$user_image)) paste0('![](', current_user$user_image, '){style="width: 300px; height: 300px; object-fit: cover; border-radius: 50%;"}')`

# `r current_user$display_name`

[`r pretty_seconds(current_duration, 'minute')`]{style="font-size: 60pt"}\
of music listened to in the last year, which is cumulatively over `r pretty_seconds(current_duration, 'day')`!

[`r current_streams`]{style="font-size: 50pt"}\
**streams** of

[`r current_tracks`]{style="font-size: 50pt"}\
**tracks** appearing on

[`r current_albums`]{style="font-size: 50pt"}\
**albums** performed by

[`r current_artists`]{style="font-size: 50pt"}\
**artists**.

Over the lifetime of your Spotify account, this has been a total of:

`r pretty_seconds(total_duration, 'minute')`\
`r total_streams` streams\
`r total_tracks` tracks\
`r total_albums` albums\
`r total_artists` artists\
:::

```{r}
#| label: git-calendar
#| fig-align: center
#| fig-cap: "Daily listening duration heatmap"
#| cap-location: top 
#| fig-width: 13.5
#| fig-height: 2.7
#| fig-format: svg

# For our calendar, we want 5 discrete colours in hours_played.
tile_cols <- c(faint_col, '#0e4429', '#006d32', '#26a641', '#39d353')

# Choose appropriate values for breaks in bin colour
tile_bin <- quantile(plays_by_date$hours_played, c(0, 0.25, 0.5, 0.75, 0.95))

# There is a chance that the quantiles will not be distinct, in particular when
# a large number of days have no plays. This makes sure there is a diff of 0.01

for (i in seq(2, length(tile_bin))) {
  tile_bin[i] <- pmax(tile_bin[i-1] + 0.01, tile_bin[i])
}

# Next lets construct the plot
plays_by_date %>%
  ggplot(aes(x = week_start, y = fct_rev(weekday), fill = hours_played)) +
  geom_tile(colour = bg_col, linejoin = 'round', linewidth = 2) +
  
  scale_x_date(
    expand = expansion(add = 2),
    position = 'top',
    date_breaks = "1 month",
    date_labels = '%b') +
  # Print every other label for the weekday axis
  scale_y_discrete(breaks = function(x) x[seq_along(x) %% 2 == 0]) +
  scale_fill_stepsn(
    colours = tile_cols,
    breaks = tile_bin,
    values = scales::rescale(tile_bin),
    guide = 'legend',
    right = FALSE
  ) +
  
  # There is surely a better way of positioning the legend labels
  annotate(
    'text', label = c('Less', 'More'),
    x = 
      c(
      max(plays_by_date$week_start) - days(47),
      max(plays_by_date$week_start)
    ),
    y = -0.35, 
    colour = '#7d8590', hjust = 1, size = 4
  ) +
  coord_cartesian(ylim = c(1, 7), clip = "off") +
  theme(
    axis.text = element_text(colour = txt_col, size = 12),
    axis.text.y = element_text(hjust = 0, margin = margin()),
    axis.ticks = element_blank(),
    axis.title = element_blank(),

    legend.background = element_blank(),
    legend.box.spacing = unit(1, 'mm'),
    legend.direction = 'horizontal',
    legend.justification = "right",
    legend.key = element_blank(),
    legend.key.size = unit(8, 'mm'),
    legend.margin = margin(r = 15, unit = 'mm'),
    legend.position = 'bottom',
    legend.spacing.x = unit(-1, 'mm'),
    legend.text = element_blank(),
    legend.title = element_blank(),

    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )
```

::: {layout="[60, -5, 30, -5]"}
##### Listening Sessions

-   Of the `r current_sessions` times you decided to listen to music on Spotify last year, you listened to an average (median) `r current_session_track_avg` tracks for `r pretty_seconds(current_session_duration_avg)`.
-   Your longest session started on `r current_session_max_date`, when you listened to `r current_session_max_tracks` tracks for over `r pretty_seconds(current_session_max_duration)`.
-   Over all time, you've had `r total_sessions` listening sessions averaging `r total_session_track_avg` tracks for around `r pretty_seconds(total_session_duration_avg)` per session.

```{r}
#| label: clock24
#| fig-align: right
#| fig-width: 3
#| fig-height: 3
#| fig-cap: "Activity by time of day"
#| cap-location: top 
#| fig-format: svg
#| dev.args: !expr 'list(bg = bg_col)'


plays_by_hour %>%
  ggplot(aes(x = as.factor(hour), y = norm_duration)) +
  geom_bar(
    stat = 'identity', width = 1,
    colour = bg_col, fill = spotify_green
  ) +
  coord_polar(start = 3.01, clip = 'off') +
  scale_y_continuous(breaks = NULL, limits = c(-0.2, 1)) +
  scale_x_discrete(
    breaks = seq(0,23,3),
    labels = str_pad(seq(0,2300,300), 4, pad = '0')) +
  theme(
    axis.text.x = element_text(colour = txt_col),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid.major.x  = element_line(colour = faint_col),
    panel.grid.major.y = element_line(colour = faint_col),
  )

```
:::

## Artists

::: text-center
### Top Artist

![`r top_artists[1, 'artist_name']`](`r top_artists[1, 'artist_image_url']`){style="width: 400px; height: 400px; margin-left: auto; margin-right: auto"}

:::

```{r}
#| label: top-artists-table

reactable(
  top_artists,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    artist.id = colDef(show = FALSE),
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    artist_name = colDef(
      name = 'Artist',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(top_artists[index, 'artist_url']), 
          target = "_blank", value
          )
      },
      minWidth = 200
    ),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    distinct_tracks = colDef(
      name = 'Tracks',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    
    artist_popularity = colDef(show = FALSE),
    followers = colDef(show = FALSE),
    artist_url = colDef(show = FALSE),
    artist_image_url = colDef(show = FALSE)
  
  ),
  language = reactableLang(
    searchPlaceholder = "Filter artists",
    noData = "No artists found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} artists",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```

*A list of all artists that you have streamed at least 5 times in the lifetime of your account. Blue circles indicate new entries in the last year, while an arrow indicates how the ranking has changed since the year before - hover for a tooltip showing the change.*

### Popularity

```{r}
#| label: artist-popularity-bubble
#| fig-width: 13.5
#| fig-height: 5
#| fig-format: svg


# Plot the top 10 artists by current plays, and the top 5 artists by 
# followers and popularity. Derive a popularity based mostly on plays, but also
# on how many tracks you've listened to.

artist_annotation <- union(
  slice_max(top_artists, order_by = current_plays, n = 10),
  slice_max(top_artists, order_by = tibble(followers, artist_popularity), n = 2)
  ) %>%
  mutate(
    you_popularity = current_plays * log10(distinct_tracks) + (all_plays / 100)
    ) %>%
  select(artist_name, you_popularity, artist_popularity, followers)


artist_annotation %>%
  ggplot(
    aes(y = scales::rescale(you_popularity, c(0, 100)), x = artist_popularity)
    ) +
  geom_point(aes(size = followers), colour = spotify_green, alpha = 0.6) +
  geom_text_repel(
    data = artist_annotation,
    aes(label = artist_name), size = 3, colour = txt_col
    ) +
  scale_x_continuous(
    limits = c(0, 100), expand = expansion(mult = c(0, 0.05)),
    ) +
  scale_y_continuous(
    limits = c(0, 100),
    expand = expansion(mult = c(0.03, 0.05))
    ) +
  scale_size_area(max_size = 10, guide = NULL) +
  geom_abline(
    intercept = 20, slope = 2.25, 
    color = faint_col, linetype = 'dotted'
    ) +
  annotate(
    'text', label = 'The Hipster Zone',
    x = 10, y = 85, 
    colour = faint_col, hjust = 0, size = 3, fontface = 'italic'
    ) +
  coord_cartesian(clip = 'off') +
  labs(y = 'Your Popularity', x = "Global Popularity") +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_text(colour = txt_light_col),
    axis.line = element_line(colour = faint_col),
    
    
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.grid  = element_line(colour = txt_light_col),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
  )


```

*The popularity of your top 10 artists and a couple of artists with the most followers. Bubble size represents the number of followers while the axes show how popular the artist is with you versus the world.*

### Genres

```{r}
#| label: genre-sunburst
#| fig-width: 10
#| fig-height: 10
#| fig-format: svg
#| warning: false

plot_ly(
  genre_map,
  ids = ~genre,
  labels = ~label,
  parents = ~parent,
  values = ~value,
  text = ~top_artist,
  type = 'sunburst',
  maxdepth = 3,
  textinfo = 'label',
  hovertemplate = paste0(
    '<b>%{label}</b><br>',
    '%{percentRoot:.2%}<br>',
    '<i>%{text}</i>',
    '<extra></extra>'
  ),
  hoverlabel = list(
    'align' = 'left',
    'bgcolor' = faint_col,
    'bordercolor' = bg_col,
    'font' = list('color' = txt_light_col)
  ),
     
  insidetextorientation = 'radial',
  rotation = 90
) %>%
  config(displayModeBar = FALSE) %>%
  layout(
    paper_bgcolor = bg_col,
    font = list(color = txt_col),
    bargap = 0,
    showlegend = FALSE,
    colorway = list(spotify_green),
    extendsunburstcolors = FALSE # This throws a warning but works...
  )


```

*An interactive sunburst chart showing the genres most frequently associated with your top 200 artists. Making genres into a hierarchy based solely on their names doesn't work very well and the percentages are a bit dubious, but doesn't it look neat when you click on it...?*

### Related Artists

Based on your top artists over the last year, here are some suggestions that you might not have heard yet (at least not on this account).

```{r}
#| label: related-artists-table
#| layout: [[-100, 550, -100]]

reactable(
  suggested_artists,
  highlight = TRUE,
  sortable = FALSE,
  wrap = TRUE,
  minRows = 10,
  width = 750,
  columns = list(
    related_artist_name = colDef(
      name = 'Artist',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(suggested_artists[index, 'related_artist_url']), 
          target = "_blank", value
          )
      },
      minWidth = 100
    ),
    
    related_artist_url = colDef(show = FALSE),
    
    related = colDef(
      name = 'Related Artists',
      resizable = TRUE,
      minWidth = 200
    )
  ),
  language = reactableLang(
    searchPlaceholder = "Filter artists",
    noData = "No artists found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} artists",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```

\

## Albums

::: text-center
### Top Album

![`r top_albums[1, 'album_name']`](`r top_albums[1, 'album_image_url']`){style="width: 400px; height: 400px; margin-left: auto; margin-right: auto"}

:::

```{r}
#| label: top-albums-table

reactable(
  top_albums,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    album.id = colDef(show = FALSE),
    
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    album_name = colDef(
      name = 'Album',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(top_albums[index, 'album_url']), 
          target = "_blank", value
        )
      },
      minWidth = 200
    ),
    artist_names = colDef(
      name = 'Artist',
      resizable = TRUE,
      minWidth = 150
    ),
    distinct_tracks = colDef(show = FALSE),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    
    album_popularity = colDef(show = FALSE),
    release_year = colDef(show = FALSE),
    album_url = colDef(show = FALSE),
    album_image_url = colDef(show = FALSE)
  
  ),
  language = reactableLang(
    searchPlaceholder = "Filter albums",
    noData = "No albums found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} albums",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```

*A list of all albums that you have streamed at least 5 times in the lifetime of your account. Blue circles indicate new entries in the last year, while an arrow indicates how the ranking has changed since the year before - hover for a tooltip showing the change.*

\

##### Release Years

```{r}
#| label: album-release-bars
#| fig-width: 13.5
#| fig-height: 5
#| fig-format: svg

top_albums %>%
  filter(current_plays >= 1) %>%
  group_by(release_year) %>%
  summarise(
    n_albums = n(),
    total_plays = sum(current_plays)
  ) %>%
  ggplot(
    aes(x = release_year, y = n_albums, 
        group = release_year, fill = total_plays)
    ) +
  geom_col() +
  scale_fill_gradient(
    low = faint_col, high = spotify_green, name = 'Plays',
    n.breaks = 5
    ) +
  guides(fill = guide_colorbar(
    ticks.colour = bg_col, frame.colour = bg_col)
    ) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.05))) +
  scale_x_continuous(breaks = seq(1960, 2030, 10))  +
  labs(x = 'Release Year', y = 'Albums') +
  theme(
    rect = element_rect(colour = bg_col, fill = bg_col),
    text = element_text(colour = txt_light_col),
    
    axis.line.x = element_line(linetype = 'solid'),
    axis.text.x = element_text(colour = txt_col),
    axis.ticks = element_blank(),
    
    legend.position = c(0.05, 0.8),
    legend.title.align = 0,
    legend.title = element_text(size = 8),
    
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid.major.x  = element_line(colour = faint_col),
    panel.grid.major.y = element_line(colour = faint_col, linetype = 'dotted'),
    panel.grid.minor = element_blank()
  )


```

*The number of distinct albums by release year with at least one track played in the last year. The intensity of the green indicates the number of plays.*

## Tracks

```{r}
#| label: top-tracks-table

reactable(
  top_tracks,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    track.id = colDef(show = FALSE),
    
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    track_name = colDef(
      name = 'Title',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(top_tracks[index, 'track_url']), 
          target = "_blank", value
        )
      },
      minWidth = 200
    ),
    artist_names = colDef(
      name = 'Artist',
      resizable = TRUE,
      minWidth = 150
    ),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    
    track_popularity = colDef(show = FALSE),
    
    track_url = colDef(show = FALSE)
  
  ),
  language = reactableLang(
    searchPlaceholder = "Filter tracks",
    noData = "No tracks found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} tracks",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```

### Audio Features

Spotify derives a series of measures based on an audio analysis of the track. These are presented below as a series of ridgeline charts broken down by month. The descriptions of the measures are lifted almost verbatim from the [Web API](https://developer.spotify.com/documentation/web-api/reference/get-audio-features) reference.

> Fun fact - for a brief period in 2017 ridgeline plots were called "joyplots" in reference to the cover of Joy Divisions 1979 album [Unknown Pleasures](https://open.spotify.com/album/5Dgqy4bBg09Rdw7CQM545s). It was short-lived, as the origins of the bands name were a little dark to be throwing around lightly.

##### Danceability

Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.

```{r}
#| label: track-features-danceability
#| fig-width: 13.5
#| fig-height: 5
#| fig-format: svg
#| message: false

user_track_features %>%
  ggplot(aes(x = danceability, y = month_played, group = month_played)) +
  geom_density_ridges(colour = faint_col, fill = spotify_green, na.rm = TRUE) +
  scale_x_continuous(breaks = c(0, 1), labels = NULL) +
  theme_ridges(grid = FALSE, font_size = 10) +
  theme(
    axis.text = element_text(colour = txt_light_col),
    axis.title = element_blank(),
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    plot.title = element_text(colour = txt_col, hjust = 0.5, size = 14)
  )
```

`r build_measure_table('danceability')`

##### Energy

Energy represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.

```{r}
#| label: track-features-energy
#| fig-width: 13.5
#| fig-height: 5
#| fig-format: svg
#| message: false

user_track_features %>%
  ggplot(aes(x = energy, y = month_played, group = month_played)) +
  geom_density_ridges(colour = faint_col, fill = spotify_green, na.rm = TRUE) +
  scale_x_continuous(breaks = c(0, 1), labels = NULL) +
  theme_ridges(grid = FALSE, font_size = 10) +
  theme(
    axis.text = element_text(colour = txt_light_col),
    axis.title = element_blank(),
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    plot.title = element_text(colour = txt_col, hjust = 0.5, size = 14)
  )
```

`r build_measure_table('energy')`

##### Valence

Valence represents the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).

```{r}
#| label: track-features-valence
#| fig-width: 13.5
#| fig-height: 5
#| fig-format: svg
#| message: false

# Valence is continuous from 0 (negative emotion) to 1 (positive emotion)
user_track_features %>%
  ggplot(aes(x = valence, y = month_played, group = month_played)) +
  geom_density_ridges(colour = faint_col, fill = spotify_green, na.rm = TRUE) +
  scale_x_continuous(breaks = c(0, 1), labels = NULL) +
  theme_ridges(grid = FALSE, font_size = 10) +
  theme(
    axis.text = element_text(colour = txt_light_col),
    axis.title = element_blank(),
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    plot.title = element_text(colour = txt_col, hjust = 0.5, size = 14)
  )


```

`r build_measure_table('valence')`