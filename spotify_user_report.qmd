---
title: "Spotify Data"
format:
  html: 
    embed-resources: true
    theme: cyborg
    fig-cap-location: top
    page-layout: full
    fontsize: 16px
editor: visual
echo: false
---

```{r}
#| label: setup
#| include: false


library(tidyverse)
library(reactable)
library(htmltools)

load('data/summary_date_data.RData')
load('data/top_things.RData')

# Unpack the list for convenience
list2env(play_summary, .GlobalEnv)


# Colours ----
bg_col <- '#060606'
faint_col <- '#161b22'

txt_col <- '#e6edf3'
txt_light_col <- '#adafae'

spotify_green <- '#1DB954'


# Reactable Utilities ----


trend_indicator <- function(value = 0) {
  args <- list(role = 'img', title = value)
  
  if (is.na(value)) {
    args <- c(args, list(shiny::icon("circle"), 
                         style = "color: #2e77d0; font-size: 0.6rem"))
  } else if (value == 0) {
    args <- c(args, list("â€“", style = "color: #666; font-weight: 700"))
  } else if (value > 0) {
    args <- c(args, list(shiny::icon("caret-up"), style = "color: #1ed760"))
  } else if (value < 0) {
    args <- c(args, list(shiny::icon("caret-down"), style = "color: #cd1a2b"))
  }
  
  do.call(span, args)
}


# Default theme
options(
  reactable.theme = reactableTheme(
    color = txt_col,
    backgroundColor = bg_col,
    borderColor = faint_col,
    
    borderWidth = '1px',
    highlightColor = 'rgba(255, 255, 255, 0.1)',
    cellPadding = '10px 8px',
    style = list(
      fontFamily = 'Work Sans, Helvetica Neue, Helvetica, Arial, sans-serif',
      fontSize = '0.875rem',
      'a' = list(
        color = txt_col,
        textDecoration = 'none',
        '&:hover, &:focus' = list(
          textDecoration = 'underline',
          textDecorationThickness = '1px'
        )
      ),
      '.number' = list(
        color = txt_col,
        fontFamily = 'Source Code Pro, Consolas, Monaco, monospace'
      ),
      '.tag' = list(
        padding = '0.125rem 0.25rem',
        color = 'hsl(0, 0%, 40%)',
        fontSize = '0.75rem',
        border = '1px solid hsl(0, 0%, 24%)',
        borderRadius = '2px',
        textTransform = 'uppercase'
      )
    ),
    headerStyle = list(
      color = txt_col,
      fontWeight = 400,
      fontSize = '0.75rem',
      letterSpacing = '1px',
      textTransform = 'uppercase',
      '&:hover, &:focus' = list(color = txt_col)
    ),
    rowHighlightStyle = list(
      '.tag' = list(color = txt_col, borderColor = txt_light_col)
    ),
    # Full-width search bar with search icon
    searchInputStyle = list(
      paddingLeft = '1.9rem',
      paddingTop = '0.5rem',
      paddingBottom = '0.5rem',
      width = '100%',
      border = 'none',
      backgroundColor = bg_col,
      backgroundSize = '1rem',
      backgroundPosition = 'left 0.5rem center',
      backgroundRepeat = 'no-repeat',
      '&:focus' = list(backgroundColor = 'rgba(255, 255, 255, 0.1)', 
                       border = 'none'),
      '::placeholder' = list(color = txt_light_col),
      '&:hover::placeholder, &:focus::placeholder' = list(color = txt_col)
    ),
    paginationStyle = list(color = txt_light_col),
    pageButtonHoverStyle = list(backgroundColor = 'hsl(0, 0%, 20%)'),
    pageButtonActiveStyle = list(backgroundColor = 'hsl(0, 0%, 24%)')
  )
)
  
```

## To `r last_date`

```{r}
#| label: git-calendar
#| fig-align: center
#| fig-cap: "Daily listening activity in the style of Github contributions"
#| fig-width: 13.5
#| fig-height: 2.7
#| fig-format: svg
#| cap-location: top

# For our calendar, we want 5 discrete colours in hours_played.
tile_cols <- c(faint_col, '#0e4429', '#006d32', '#26a641', '#39d353')

# Choose appropriate values for breaks in bin colour
tile_bin <- quantile(plays_by_date$hours_played, c(0, 0.25, 0.5, 0.75, 0.95))

# There is a chance that the quantiles will not be distinct, in particular when
# a large number of days have no plays. This makes sure there is a diff of 0.01

for (i in seq(2, length(tile_bin))) {
  tile_bin[i] <- pmax(tile_bin[i-1] + 0.01, tile_bin[i])
}

# Next lets construct the plot
plays_by_date %>%
  ggplot(aes(x = week_start, y = fct_rev(weekday), fill = hours_played)) +
  geom_tile(colour = bg_col, linejoin = 'round', linewidth = 2) +
  
  scale_x_date(
    expand = expansion(add = 2),
    position = 'top',
    date_breaks = "1 month",
    date_labels = '%b') +
  # Print every other label for the weekday axis
  scale_y_discrete(breaks = function(x) x[seq_along(x) %% 2 == 0]) +
  scale_fill_stepsn(
    colours = tile_cols,
    breaks = tile_bin,
    values = scales::rescale(tile_bin),
    guide = 'legend',
    right = FALSE
  ) +
  
  # There is surely a better way of positioning the legend labels
  annotate(
    'text', label = c('Less', 'More'),
    x = 
      c(
      max(plays_by_date$week_start) - days(47),
      max(plays_by_date$week_start)
    ),
    y = -0.35, 
    colour = '#7d8590', hjust = 1, size = 4
  ) +
  coord_cartesian(ylim = c(1, 7), clip = "off") +
  theme(
    axis.text = element_text(colour = txt_col, size = 12),
    axis.text.y = element_text(hjust = 0, margin = margin()),
    axis.ticks = element_blank(),
    axis.title = element_blank(),

    legend.background = element_blank(),
    legend.box.spacing = unit(1, 'mm'),
    legend.direction = 'horizontal',
    legend.justification = "right",
    legend.key = element_blank(),
    legend.key.size = unit(8, 'mm'),
    legend.margin = margin(r = 15, unit = 'mm'),
    legend.position = 'bottom',
    legend.spacing.x = unit(-1, 'mm'),
    legend.text = element_blank(),
    legend.title = element_blank(),

    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )
```



:::::{layout="[-5, 50, -10, 30, -5]"}

|          |           Last Year |         All-Time |
|---------:|--------------------:|-----------------:|
| Streams  |`r current_streams`  |`r total_streams` |
| Duration |`r current_duration` |`r total_duration`|
| Tracks   |`r current_tracks`   |`r total_tracks`  |
| Albums   |`r current_albums`   |`r total_albums`  |
| Artists  |`r current_artists`  |`r total_artists` |

: Listening Overview {.hover tbl-colwidths="[20, 40, 40]"}

```{r}
#| label: clock24
#| fig-align: right
#| fig-width: 3
#| fig-height: 3
#| fig-cap: "Activity by time of day"
#| fig-format: svg
#| dev.args: !expr 'list(bg = bg_col)'


plays_by_hour %>%
  ggplot(aes(x = as.factor(hour), y = norm_duration)) +
  geom_bar(
    stat = 'identity', width = 1,
    colour = bg_col, fill = spotify_green
  ) +
  coord_polar(start = 3.01, clip = 'off') +
  scale_y_continuous(breaks = NULL, limits = c(-0.2, 1)) +
  scale_x_discrete(
    breaks = seq(0,23,3),
    labels = str_pad(seq(0,2300,300), 4, pad = '0')) +
  theme(
    axis.text.x = element_text(colour = txt_col),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid.major.x  = element_line(colour = faint_col),
    panel.grid.major.y = element_line(colour = faint_col),
  )

```

:::::

## Top Tracks

```{r}
#| label: top-tracks-table

reactable(
  top_tracks,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    track_name = colDef(
      name = 'Title',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(top_tracks[index, 'track_url']), 
          target = "_blank", value
        )
      },
      minWidth = 200
    ),
    artist_names = colDef(
      name = 'Artist',
      resizable = TRUE,
      minWidth = 150
    ),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    
    track_popularity = colDef(show = FALSE),
    
    track_url = colDef(show = FALSE)
  
  ),
  language = reactableLang(
    searchPlaceholder = "Filter tracks",
    noData = "No tracks found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} tracks",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```

## Top Albums

```{r}
#| label: top-albums-table

reactable(
  top_albums,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    album_name = colDef(
      name = 'Album',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(top_albums[index, 'album_url']), 
          target = "_blank", value
        )
      },
      minWidth = 200
    ),
    artist_names = colDef(
      name = 'Artist',
      resizable = TRUE,
      minWidth = 150
    ),
    distinct_tracks = colDef(
      name = 'Tracks',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    
    album_popularity = colDef(show = FALSE),
    release_year = colDef(show = FALSE),
    album_url = colDef(show = FALSE)
  
  ),
  language = reactableLang(
    searchPlaceholder = "Filter albums",
    noData = "No albums found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} albums",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```



``` {r}
#| label: album-release-bars
#| fig-width: 13.5
#| fig-height: 5
#| fig-cap: "Albums by release year"
#| fig-format: svg

top_albums %>%
  group_by(release_year) %>%
  summarise(
    n_albums = n(),
    total_plays = sum(all_plays)
  ) %>%
  ggplot(
    aes(x = release_year, y = n_albums, 
        group = release_year, fill = total_plays)
    ) +
  geom_col() +
  scale_fill_gradient(
    low = faint_col, high = spotify_green, name = 'Plays',
    n.breaks = 5
    ) +
  guides(fill = guide_colorbar(
    ticks.colour = bg_col, frame.colour = bg_col)
    ) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.05))) +
  labs(x = 'Release Year', y = 'Albums') +
  theme(
    rect = element_rect(colour = bg_col, fill = bg_col),
    text = element_text(colour = txt_light_col),
    
    axis.line.x = element_line(linetype = 'solid'),
    axis.text.x = element_text(colour = txt_col),
    axis.ticks = element_blank(),
    
    legend.position = c(0.05, 0.8),
    legend.title.align = 0,
    legend.title = element_text(size = 8),
    
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid.major.x  = element_line(colour = faint_col),
    panel.grid.major.y = element_line(colour = faint_col, linetype = 'dotted'),
    panel.grid.minor = element_blank()
  )


```

## Top Artists

```{r}
#| label: top-artists-table

reactable(
  top_artists,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    artist_name = colDef(
      name = 'Artist',
      resizable = TRUE,
      cell = function(value, index) {
        tags$a(
          href = pull(top_artists[index, 'artist_url']), 
          target = "_blank", value
          )
      },
      minWidth = 200
    ),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    distinct_tracks = colDef(
      name = 'Tracks',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    
    artist_popularity = colDef(show = FALSE),
    
    artist_url = colDef(show = FALSE)
  
  ),
  language = reactableLang(
    searchPlaceholder = "Filter artists",
    noData = "No artists found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} artists",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```


## Top Genres

```{r}
#| label: top-genres-table

reactable(
  top_genres,
  searchable = TRUE,
  highlight = TRUE,
  wrap = FALSE,
  paginationType = 'simple',
  minRows = 10,
  columns = list(
    current_rank = colDef(
      header = tagList(
        span('#', 'aria-hidden' = 'true', title = 'Position')
      ),
      width = 50
    ),
    rank_diff = colDef(
      header = span('Trend', class = 'sr-only'),
      sortable = FALSE,
      align = 'center',
      width = 40,
      cell = function(value) trend_indicator(value)
    ),
    genres = colDef(
      name = 'Genre',
      resizable = TRUE,
      minWidth = 200
    ),
    first_listen = colDef(
      name = 'First Play',
      format = colFormat(date = TRUE, locales = 'en-AU'),
      width = 120
    ),
    distinct_tracks = colDef(
      name = 'Tracks',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    ),
    current_plays = colDef(
      name = 'Last Year',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 100,
      class = 'number'
    ),
    all_plays = colDef(
      name = 'All Time',
      format = colFormat(separators = TRUE),
      defaultSortOrder = 'desc',
      width = 90,
      class = 'number'
    )
  ),
  language = reactableLang(
    searchPlaceholder = "Filter genres",
    noData = "No genres found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} genres",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)

```


