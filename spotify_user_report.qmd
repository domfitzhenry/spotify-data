---
title: "Spotify Data"
format:
  html: 
    theme: cyborg
    fig-cap-location: top
    page-layout: full
    fontsize: 16px
editor: visual
echo: false
---

```{r}
#| label: setup
#| include: false


library(tidyverse)


load('data/summary_date_data.RData')

# Unpack the list for convenience
list2env(play_summary, .GlobalEnv)


# Colours ----
bg_col <- '#060606'
txt_col <- '#e6edf3'
faint_col <- '#161b22'

spotify_green <- '#1DB954'
  
```

## From `r first_date` to `r last_date`

```{r}
#| label: git-calendar
#| fig-align: center
#| fig-cap: "Daily listening activity in the style of Github contributions"
#| fig-width: 13.5
#| fig-height: 2.7
#| fig-format: svg
#| cap-location: top

# For our calendar, we want 5 discrete colours in hours_played.
tile_cols <- c(faint_col, '#0e4429', '#006d32', '#26a641', '#39d353')

# Choose appropriate values for breaks in bin colour
tile_bin <- quantile(plays_by_date$hours_played, c(0, 0.25, 0.5, 0.75, 0.95))

# Next lets construct the plot
plays_by_date %>%
  ggplot(aes(x = week_start, y = fct_rev(weekday), fill = hours_played)) +
  geom_tile(colour = bg_col, linejoin = 'round', linewidth = 2) +
  
  scale_x_date(
    expand = expansion(add = 2),
    position = 'top',
    date_breaks = "1 month",
    date_labels = '%b') +
  # Print every other label for the weekday axis
  scale_y_discrete(breaks = function(x) x[seq_along(x) %% 2 == 0]) +
  scale_fill_stepsn(
    colours = tile_cols,
    breaks = tile_bin,
    values = scales::rescale(tile_bin),
    guide = 'legend',
    right = FALSE
  ) +
  
  # There is surely a better way of positioning the legend labels
  annotate(
    'text', label = c('Less', 'More'),
    x = 
      c(
      max(plays_by_date$week_start) - days(47),
      max(plays_by_date$week_start)
    ),
    y = -0.35, 
    colour = '#7d8590', hjust = 1, size = 4
  ) +
  coord_cartesian(ylim = c(1, 7), clip = "off") +
  theme(
    axis.text = element_text(colour = txt_col, size = 12),
    axis.text.y = element_text(hjust = 0, margin = margin()),
    axis.ticks = element_blank(),
    axis.title = element_blank(),

    legend.background = element_blank(),
    legend.box.spacing = unit(1, 'mm'),
    legend.direction = 'horizontal',
    legend.justification = "right",
    legend.key = element_blank(),
    legend.key.size = unit(8, 'mm'),
    legend.margin = margin(r = 15, unit = 'mm'),
    legend.position = 'bottom',
    legend.spacing.x = unit(-1, 'mm'),
    legend.text = element_blank(),
    legend.title = element_blank(),

    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )
```



:::::{layout="[-5, 50, -10, 30, -5]"}

|          |           Last Year |         All-Time |
|---------:|--------------------:|-----------------:|
| Streams  |`r current_streams`  |`r total_streams` |
| Duration |`r current_duration` |`r total_duration`|
| Tracks   |`r current_tracks`   |`r total_tracks`  |
| Albums   |`r current_albums`   |`r total_albums`  |
| Artists  |`r current_artists`  |`r total_artists` |

: Listening Overview {.hover tbl-colwidths="[20, 40, 40]"}

```{r}
#| label: clock24
#| fig-align: right
#| fig-width: 3
#| fig-height: 3
#| fig-cap: "Activity by time of day proportional to the most active hour"
#| fig-format: svg
#| dev.args: !expr 'list(bg = bg_col)'


plays_by_hour %>%
  ggplot(aes(x = as.factor(hour), y = norm_duration)) +
  geom_bar(
    stat = 'identity', width = 1,
    colour = bg_col, fill = spotify_green
  ) +
  coord_polar(start = 3.01, clip = 'off') +
  scale_y_continuous(breaks = NULL, limits = c(-0.2, 1)) +
  scale_x_discrete(
    breaks = seq(0,23,3),
    labels = str_pad(seq(0,2300,300), 4, pad = '0')) +
  theme(
    axis.text.x = element_text(colour = txt_col),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    
    plot.background = element_rect(colour = bg_col, fill = bg_col),
    
    panel.background = element_rect(colour = bg_col, fill = bg_col),
    panel.border = element_blank(),
    panel.grid.major.x  = element_line(colour = faint_col),
    panel.grid.major.y = element_line(colour = faint_col),
  )

```

:::::



